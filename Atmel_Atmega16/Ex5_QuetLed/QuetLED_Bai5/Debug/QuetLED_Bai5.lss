
QuetLED_Bai5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066b  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cf  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 82 00 	call	0x104	; 0x104 <main>
  7a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z7hienthij>:
#include <avr/io.h>
#include <avr/delay.h>
unsigned char led[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

void hienthi(unsigned int x) 
{
  82:	fc 01       	movw	r30, r24
	uint16_t temp, ch, dv;
	// tach va luu vao cac bien hang chuc va don vi
	temp = x;
	dv = temp %10;
  84:	9c 01       	movw	r18, r24
  86:	ad ec       	ldi	r26, 0xCD	; 205
  88:	bc ec       	ldi	r27, 0xCC	; 204
  8a:	0e 94 bd 00 	call	0x17a	; 0x17a <__umulhisi3>
  8e:	ac 01       	movw	r20, r24
  90:	56 95       	lsr	r21
  92:	47 95       	ror	r20
  94:	56 95       	lsr	r21
  96:	47 95       	ror	r20
  98:	56 95       	lsr	r21
  9a:	47 95       	ror	r20
  9c:	ca 01       	movw	r24, r20
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	44 0f       	add	r20, r20
  a4:	55 1f       	adc	r21, r21
  a6:	44 0f       	add	r20, r20
  a8:	55 1f       	adc	r21, r21
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	48 0f       	add	r20, r24
  b0:	59 1f       	adc	r21, r25
  b2:	cf 01       	movw	r24, r30
  b4:	84 1b       	sub	r24, r20
  b6:	95 0b       	sbc	r25, r21
  b8:	ac 01       	movw	r20, r24
	temp = temp /10;
  ba:	0e 94 bd 00 	call	0x17a	; 0x17a <__umulhisi3>
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	96 95       	lsr	r25
  c4:	87 95       	ror	r24
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
	ch = temp;	
	// hien thi led so 1
	PORTA = 0x00;
  ca:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0x01;
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	2b bb       	out	0x1b, r18	; 27
	PORTB = led[ch];
  d0:	fc 01       	movw	r30, r24
  d2:	e0 5a       	subi	r30, 0xA0	; 160
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	80 81       	ld	r24, Z
  d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z7hienthij+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z7hienthij+0x62>
  e4:	00 00       	nop
	_delay_ms(1);
	// hien thi led so 2
	PORTA = 0x00;
  e6:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0x02;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	8b bb       	out	0x1b, r24	; 27
	PORTB = led[dv];
  ec:	fa 01       	movw	r30, r20
  ee:	e0 5a       	subi	r30, 0xA0	; 160
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	8f e9       	ldi	r24, 0x9F	; 159
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <_Z7hienthij+0x78>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_Z7hienthij+0x7e>
 100:	00 00       	nop
 102:	08 95       	ret

00000104 <main>:
	_delay_ms(1);
}

int main(void)
{
	DDRB = 0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
 108:	88 bb       	out	0x18, r24	; 24
	
	DDRA = (1 << PINA0) | (1 << PINA1);
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 10e:	1b ba       	out	0x1b, r1	; 27
	
	DDRC = (0 << PINA0) | (0 << PINA1);
 110:	14 ba       	out	0x14, r1	; 20
		
	int i = 0;
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {	
		hienthi(i);
 116:	d0 2f       	mov	r29, r16
 118:	c1 2f       	mov	r28, r17
 11a:	c8 01       	movw	r24, r16
 11c:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
		
		// nut bam tang
		if((PINC & (1 << PINC0)) == 0)
 120:	98 99       	sbic	0x13, 0	; 19
 122:	15 c0       	rjmp	.+42     	; 0x14e <main+0x4a>
		{
			while((PINC & (1 << PINC0)) == 0)
 124:	98 99       	sbic	0x13, 0	; 19
 126:	05 c0       	rjmp	.+10     	; 0x132 <main+0x2e>
			{
				hienthi(i);
 128:	8d 2f       	mov	r24, r29
 12a:	9c 2f       	mov	r25, r28
 12c:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
		hienthi(i);
		
		// nut bam tang
		if((PINC & (1 << PINC0)) == 0)
		{
			while((PINC & (1 << PINC0)) == 0)
 130:	f9 cf       	rjmp	.-14     	; 0x124 <main+0x20>
			{
				hienthi(i);
			}
			++i;
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
			hienthi(i);
 136:	c8 01       	movw	r24, r16
 138:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
			if(i > 99)
 13c:	04 36       	cpi	r16, 0x64	; 100
 13e:	11 05       	cpc	r17, r1
 140:	34 f0       	brlt	.+12     	; 0x14e <main+0x4a>
			{
				i = 0;
				hienthi(i);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
			}
			++i;
			hienthi(i);
			if(i > 99)
			{
				i = 0;
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	10 e0       	ldi	r17, 0x00	; 0
				hienthi(i);
			}
		}
		
		// nut bam giam
		if((PINC & (1 << PINC1)) == 0)
 14e:	99 99       	sbic	0x13, 1	; 19
 150:	e2 cf       	rjmp	.-60     	; 0x116 <main+0x12>
		{
			while((PINC & (1 << PINC1)) == 0)
 152:	99 99       	sbic	0x13, 1	; 19
 154:	04 c0       	rjmp	.+8      	; 0x15e <main+0x5a>
			{
				hienthi(i);
 156:	c8 01       	movw	r24, r16
 158:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
		}
		
		// nut bam giam
		if((PINC & (1 << PINC1)) == 0)
		{
			while((PINC & (1 << PINC1)) == 0)
 15c:	fa cf       	rjmp	.-12     	; 0x152 <main+0x4e>
			{
				hienthi(i);
			}
			--i;
 15e:	01 50       	subi	r16, 0x01	; 1
 160:	11 09       	sbc	r17, r1
			hienthi(i);
 162:	c8 01       	movw	r24, r16
 164:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
			if(i < 0)
 168:	11 23       	and	r17, r17
 16a:	ac f6       	brge	.-86     	; 0x116 <main+0x12>
			{
				i = 99;
				hienthi(i);
 16c:	83 e6       	ldi	r24, 0x63	; 99
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 41 00 	call	0x82	; 0x82 <_Z7hienthij>
			}
			--i;
			hienthi(i);
			if(i < 0)
			{
				i = 99;
 174:	03 e6       	ldi	r16, 0x63	; 99
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	ce cf       	rjmp	.-100    	; 0x116 <main+0x12>

0000017a <__umulhisi3>:
 17a:	a2 9f       	mul	r26, r18
 17c:	b0 01       	movw	r22, r0
 17e:	b3 9f       	mul	r27, r19
 180:	c0 01       	movw	r24, r0
 182:	a3 9f       	mul	r26, r19
 184:	70 0d       	add	r23, r0
 186:	81 1d       	adc	r24, r1
 188:	11 24       	eor	r1, r1
 18a:	91 1d       	adc	r25, r1
 18c:	b2 9f       	mul	r27, r18
 18e:	70 0d       	add	r23, r0
 190:	81 1d       	adc	r24, r1
 192:	11 24       	eor	r1, r1
 194:	91 1d       	adc	r25, r1
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
