
00_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009fb  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006dd  00000000  00000000  00000d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000460  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ed  00000000  00000000  00001d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  7a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z9Write2Nibh>:

void Write8Bit(uint8_t chr)
{
	DATA_O=chr;   //out 8 bits to DATA Line
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable
  82:	28 b3       	in	r18, 0x18	; 24
  84:	2f 70       	andi	r18, 0x0F	; 15
  86:	38 2f       	mov	r19, r24
  88:	30 7f       	andi	r19, 0xF0	; 240
  8a:	40 e1       	ldi	r20, 0x10	; 16
  8c:	84 9f       	mul	r24, r20
  8e:	c0 01       	movw	r24, r0
  90:	11 24       	eor	r1, r1
  92:	92 2f       	mov	r25, r18
  94:	93 2b       	or	r25, r19
  96:	98 bb       	out	0x18, r25	; 24
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 60       	ori	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9b 7f       	andi	r25, 0xFB	; 251
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	82 2b       	or	r24, r18
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <_Z8wait_LCDv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	80 e7       	ldi	r24, 0x70	; 112
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <_Z8wait_LCDv+0x6>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8wait_LCDv+0x10>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <_Z8init_LCDv>:
	
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	87 bb       	out	0x17, r24	; 23
	DDR_DATA=0xFF;
  ce:	87 bb       	out	0x17, r24	; 23
	
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	88 bb       	out	0x18, r24	; 24
	cbi(CTRL, RW); // AVR->LCD
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	88 bb       	out	0x18, r24	; 24
	cbi(CTRL, EN);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	88 bb       	out	0x18, r24	; 24
	
	sbi(CTRL,EN); //enable
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	88 bb       	out	0x18, r24	; 24
	sbi(DATA_O, 5);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	88 bb       	out	0x18, r24	; 24
	cbi(CTRL,EN); //disable
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	88 bb       	out	0x18, r24	; 24
	wait_LCD();
  f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
	Write2Nib(0x28);//4 bit mode 2line, 5x8 font
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
  fe:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	88 bb       	out	0x18, r24	; 24
	Write2Nib(0x0E); //not Cursor display, 0x0E: with cursor
 108:	8e e0       	ldi	r24, 0x0E	; 14
 10a:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
 10e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>

	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
 112:	88 b3       	in	r24, 0x18	; 24
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	88 bb       	out	0x18, r24	; 24
	Write2Nib(0x06);
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
 11e:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
 122:	08 95       	ret

00000124 <_Z7clr_LCDv>:

}

void clr_LCD() // xoa LCD
{
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	88 bb       	out	0x18, r24	; 24
	Write2Nib(0x01);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
 134:	08 95       	ret

00000136 <_Z8move_LCDhh>:
//}

void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tinh ma lenh
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
 13e:	86 2f       	mov	r24, r22
 140:	90 e4       	ldi	r25, 0x40	; 64
 142:	29 9f       	mul	r18, r25
 144:	80 0d       	add	r24, r0
 146:	11 24       	eor	r1, r1
	cbi(CTRL,RS); // the following data is COMMAND
 148:	98 b3       	in	r25, 0x18	; 24
 14a:	9e 7f       	andi	r25, 0xFE	; 254
 14c:	98 bb       	out	0x18, r25	; 24
	Write2Nib(Ad);
 14e:	81 58       	subi	r24, 0x81	; 129
 150:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
 154:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
 158:	08 95       	ret

0000015a <_Z11putChar_LCDh>:

}

void putChar_LCD(uint8_t chr)  // output character 1 by 1
{
	sbi(CTRL,RS); //this is a normal DATA
 15a:	98 b3       	in	r25, 0x18	; 24
 15c:	91 60       	ori	r25, 0x01	; 1
 15e:	98 bb       	out	0x18, r25	; 24
	Write2Nib(chr);
 160:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
	wait_LCD();
 164:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8wait_LCDv>
 168:	08 95       	ret

0000016a <_Z9print_LCDPc>:
}

void print_LCD(char* str)   // output a string
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	8c 01       	movw	r16, r24
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	f8 01       	movw	r30, r16
 176:	ec 0f       	add	r30, r28
 178:	f1 1d       	adc	r31, r1
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	21 f0       	breq	.+8      	; 0x188 <_Z9print_LCDPc+0x1e>
	{ putChar_LCD(str[i]);}
 180:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z11putChar_LCDh>
}

void print_LCD(char* str)   // output a string
{
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 184:	cf 5f       	subi	r28, 0xFF	; 255
 186:	f6 cf       	rjmp	.-20     	; 0x174 <_Z9print_LCDPc+0xa>
	{ putChar_LCD(str[i]);}
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	08 95       	ret

00000190 <main>:

int main(void)
{
	/* Replace with your application code */
	
	init_LCD(); // khoi dong LCD
 190:	0e 94 65 00 	call	0xca	; 0xca <_Z8init_LCDv>
	clr_LCD(); // xoa noi dung LCD
 194:	0e 94 92 00 	call	0x124	; 0x124 <_Z7clr_LCDv>
	
	move_LCD(1,7);	// di chuyen den dong 1 bat dau tu ki tu thu 7
 198:	67 e0       	ldi	r22, 0x07	; 7
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 9b 00 	call	0x136	; 0x136 <_Z8move_LCDhh>
	putChar_LCD('X'); // Xuat ky tu X
 1a0:	88 e5       	ldi	r24, 0x58	; 88
 1a2:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z11putChar_LCDh>
	move_LCD(2,1);	// di chuyen den dong 2 bat dau tu ki tu thu 1
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 9b 00 	call	0x136	; 0x136 <_Z8move_LCDhh>
	print_LCD("Input_a_string!"); // Xuat ra mot chuoi  (string length <= 15)
 1ae:	80 e6       	ldi	r24, 0x60	; 96
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z9print_LCDPc>
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x26>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
