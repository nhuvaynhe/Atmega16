
Dongho_Bai8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006a  0080006a  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000983  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000664  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b7  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cc  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z6Secondj>:
void Second(unsigned int x)
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
  92:	6a e0       	ldi	r22, 0x0A	; 10
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
  9a:	ac 01       	movw	r20, r24
	for(int i = 0; i < 3; i++) {
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	23 30       	cpi	r18, 0x03	; 3
  a2:	31 05       	cpc	r19, r1
  a4:	fc f4       	brge	.+62     	; 0xe4 <_Z6Secondj+0x52>
		// hien thi hang chuc
		PORTB = 0x00;
  a6:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB0);
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	98 bb       	out	0x18, r25	; 24
		PORTA = led[ch];
  ac:	fb 01       	movw	r30, r22
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ee       	ldi	r24, 0xE7	; 231
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z6Secondj+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z6Secondj+0x2e>
  c0:	00 00       	nop
		_delay_ms(0.5);
		// hien thi hang don vi
		PORTB = 0x00;
  c2:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB1);
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	98 bb       	out	0x18, r25	; 24
		PORTA = led[dv];
  c8:	fa 01       	movw	r30, r20
  ca:	e0 5a       	subi	r30, 0xA0	; 160
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	90 81       	ld	r25, Z
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	87 ee       	ldi	r24, 0xE7	; 231
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <_Z6Secondj+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <_Z6Secondj+0x4a>
  dc:	00 00       	nop
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
	for(int i = 0; i < 3; i++) {
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	de cf       	rjmp	.-68     	; 0xa0 <_Z6Secondj+0xe>
  e4:	08 95       	ret

000000e6 <_Z6Minutej>:
void Minute(unsigned int x)
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
  e6:	6a e0       	ldi	r22, 0x0A	; 10
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
  ee:	ac 01       	movw	r20, r24
	for(int i = 0; i < 3; i++) {
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	23 30       	cpi	r18, 0x03	; 3
  f6:	31 05       	cpc	r19, r1
  f8:	fc f4       	brge	.+62     	; 0x138 <_Z6Minutej+0x52>
		// hien thi hang chuc
		PORTB = 0x00;
  fa:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB2);
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	98 bb       	out	0x18, r25	; 24
		PORTC = led[ch];
 100:	fb 01       	movw	r30, r22
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	90 81       	ld	r25, Z
 108:	95 bb       	out	0x15, r25	; 21
 10a:	87 ee       	ldi	r24, 0xE7	; 231
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_Z6Minutej+0x28>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z6Minutej+0x2e>
 114:	00 00       	nop
		_delay_ms(0.5);
		// hien thi hang don vi
		PORTB = 0x00;
 116:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB3);
 118:	98 e0       	ldi	r25, 0x08	; 8
 11a:	98 bb       	out	0x18, r25	; 24
		PORTC = led[dv];
 11c:	fa 01       	movw	r30, r20
 11e:	e0 5a       	subi	r30, 0xA0	; 160
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	90 81       	ld	r25, Z
 124:	95 bb       	out	0x15, r25	; 21
 126:	87 ee       	ldi	r24, 0xE7	; 231
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z6Minutej+0x44>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z6Minutej+0x4a>
 130:	00 00       	nop
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
	for(int i = 0; i < 3; i++) {
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	de cf       	rjmp	.-68     	; 0xf4 <_Z6Minutej+0xe>
 138:	08 95       	ret

0000013a <_Z4Hourj>:
void Hour(unsigned int x)
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
 13a:	6a e0       	ldi	r22, 0x0A	; 10
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 75 01 	call	0x2ea	; 0x2ea <__divmodhi4>
 142:	ac 01       	movw	r20, r24
	for(int i = 0; i < 3; i++) {
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	23 30       	cpi	r18, 0x03	; 3
 14a:	31 05       	cpc	r19, r1
 14c:	fc f4       	brge	.+62     	; 0x18c <_Z4Hourj+0x52>
		// hien thi hang chuc
		PORTB = 0x00;
 14e:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB4);
 150:	90 e1       	ldi	r25, 0x10	; 16
 152:	98 bb       	out	0x18, r25	; 24
		PORTD = led[ch];
 154:	fb 01       	movw	r30, r22
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	90 81       	ld	r25, Z
 15c:	92 bb       	out	0x12, r25	; 18
 15e:	87 ee       	ldi	r24, 0xE7	; 231
 160:	93 e0       	ldi	r25, 0x03	; 3
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z4Hourj+0x28>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z4Hourj+0x2e>
 168:	00 00       	nop
		_delay_ms(0.5);
		// hien thi hang don vi
		PORTB = 0x00;
 16a:	18 ba       	out	0x18, r1	; 24
		PORTB = (1 << PINB5);
 16c:	90 e2       	ldi	r25, 0x20	; 32
 16e:	98 bb       	out	0x18, r25	; 24
		PORTD = led[dv];
 170:	fa 01       	movw	r30, r20
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	90 81       	ld	r25, Z
 178:	92 bb       	out	0x12, r25	; 18
 17a:	87 ee       	ldi	r24, 0xE7	; 231
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z4Hourj+0x44>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_Z4Hourj+0x4a>
 184:	00 00       	nop
{
	int temp, ch, dv;
	temp = x;
	ch = temp / 10;
	dv = temp % 10;
	for(int i = 0; i < 3; i++) {
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	de cf       	rjmp	.-68     	; 0x148 <_Z4Hourj+0xe>
 18c:	08 95       	ret

0000018e <main>:
}

int main(void)
{	
	//For the transistor
	DDRB = 0b00111111; //0b00111111
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 192:	18 ba       	out	0x18, r1	; 24
	// Second
	DDRA = 0xFF;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 198:	1b ba       	out	0x1b, r1	; 27
	// Minute
	DDRC = 0xFF;
 19a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 19c:	15 ba       	out	0x15, r1	; 21
	// Hour
	DDRD = 0xFF;
 19e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
 1a0:	12 ba       	out	0x12, r1	; 18
	// Timer
	TCCR0 = (1 << CS00) | (1 << CS01);
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 130;
 1a6:	82 e8       	ldi	r24, 0x82	; 130
 1a8:	82 bf       	out	0x32, r24	; 50
	TIMSK = (1 << TOIE0);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	89 bf       	out	0x39, r24	; 57
	sei();
 1ae:	78 94       	sei
	
	while(1)
	{
		Second(sec);
 1b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 1b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec+0x1>
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <_Z6Secondj>
		Minute(min);
 1bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 1c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <min+0x1>
 1c4:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z6Minutej>
		Hour(hr);
 1c8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 1cc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 1d0:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z4Hourj>
		if (dem >= 5) {
 1d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <dem>
 1d8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <dem+0x1>
 1dc:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <dem+0x2>
 1e0:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <dem+0x3>
 1e4:	05 97       	sbiw	r24, 0x05	; 5
 1e6:	a1 05       	cpc	r26, r1
 1e8:	b1 05       	cpc	r27, r1
 1ea:	10 f3       	brcs	.-60     	; 0x1b0 <main+0x22>
			sec++;
 1ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 1f0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <sec+0x1>
 1fa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec>
			dem = 0;
 1fe:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <dem>
 202:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <dem+0x1>
 206:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <dem+0x2>
 20a:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <dem+0x3>
			if(sec < 60) {
 20e:	8c 33       	cpi	r24, 0x3C	; 60
 210:	91 05       	cpc	r25, r1
 212:	7c f4       	brge	.+30     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
				Second(sec);
 214:	0e 94 49 00 	call	0x92	; 0x92 <_Z6Secondj>
				Minute(min);
 218:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 21c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <min+0x1>
 220:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z6Minutej>
				Hour(hr);
 224:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 228:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 22c:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z4Hourj>
 230:	bf cf       	rjmp	.-130    	; 0x1b0 <main+0x22>
			}
			else {
				min++;
 232:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 236:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <min+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <min+0x1>
 240:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <min>
				if (!(min < 60)) {
 244:	cc 97       	sbiw	r24, 0x3c	; 60
 246:	9c f0       	brlt	.+38     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
					min = 0;
 248:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <min+0x1>
 24c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <min>
					hr = (hr < 60) ? ++hr : 0;
 250:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 254:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 258:	8c 33       	cpi	r24, 0x3C	; 60
 25a:	91 05       	cpc	r25, r1
 25c:	14 f4       	brge	.+4      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	02 c0       	rjmp	.+4      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 26a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				}
				sec = 0;
 26e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sec+0x1>
 272:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <sec>
				Hour(hr);
 276:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 27a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 27e:	0e 94 9d 00 	call	0x13a	; 0x13a <_Z4Hourj>
				Second(sec);
 282:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec>
 286:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec+0x1>
 28a:	0e 94 49 00 	call	0x92	; 0x92 <_Z6Secondj>
				Minute(min);
 28e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 292:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <min+0x1>
 296:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z6Minutej>
 29a:	8a cf       	rjmp	.-236    	; 0x1b0 <main+0x22>

0000029c <__vector_9>:
		}	
	}
}

ISR(TIMER0_OVF_vect)
{
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
	TCNT0 = 130;
 2ae:	82 e8       	ldi	r24, 0x82	; 130
 2b0:	82 bf       	out	0x32, r24	; 50
	dem++;
 2b2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <dem>
 2b6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <dem+0x1>
 2ba:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <dem+0x2>
 2be:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <dem+0x3>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <dem>
 2cc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <dem+0x1>
 2d0:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <dem+0x2>
 2d4:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <dem+0x3>
}
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__divmodhi4>:
 2ea:	97 fb       	bst	r25, 7
 2ec:	07 2e       	mov	r0, r23
 2ee:	16 f4       	brtc	.+4      	; 0x2f4 <__divmodhi4+0xa>
 2f0:	00 94       	com	r0
 2f2:	07 d0       	rcall	.+14     	; 0x302 <__divmodhi4_neg1>
 2f4:	77 fd       	sbrc	r23, 7
 2f6:	09 d0       	rcall	.+18     	; 0x30a <__divmodhi4_neg2>
 2f8:	0e 94 89 01 	call	0x312	; 0x312 <__udivmodhi4>
 2fc:	07 fc       	sbrc	r0, 7
 2fe:	05 d0       	rcall	.+10     	; 0x30a <__divmodhi4_neg2>
 300:	3e f4       	brtc	.+14     	; 0x310 <__divmodhi4_exit>

00000302 <__divmodhi4_neg1>:
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	08 95       	ret

0000030a <__divmodhi4_neg2>:
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255

00000310 <__divmodhi4_exit>:
 310:	08 95       	ret

00000312 <__udivmodhi4>:
 312:	aa 1b       	sub	r26, r26
 314:	bb 1b       	sub	r27, r27
 316:	51 e1       	ldi	r21, 0x11	; 17
 318:	07 c0       	rjmp	.+14     	; 0x328 <__udivmodhi4_ep>

0000031a <__udivmodhi4_loop>:
 31a:	aa 1f       	adc	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	a6 17       	cp	r26, r22
 320:	b7 07       	cpc	r27, r23
 322:	10 f0       	brcs	.+4      	; 0x328 <__udivmodhi4_ep>
 324:	a6 1b       	sub	r26, r22
 326:	b7 0b       	sbc	r27, r23

00000328 <__udivmodhi4_ep>:
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	5a 95       	dec	r21
 32e:	a9 f7       	brne	.-22     	; 0x31a <__udivmodhi4_loop>
 330:	80 95       	com	r24
 332:	90 95       	com	r25
 334:	bc 01       	movw	r22, r24
 336:	cd 01       	movw	r24, r26
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
