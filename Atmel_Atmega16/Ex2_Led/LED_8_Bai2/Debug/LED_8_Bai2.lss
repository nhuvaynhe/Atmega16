
LED_8_Bai2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ba  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019f  00000000  00000000  00000c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  70:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0x00;
  72:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	88 bb       	out	0x18, r24	; 24
#include <avr/io.h>
#include <avr/delay.h>


int main(void)
{
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
	DDRB = 0x00;
	PORTB = 0x01;
	int ite = 0;
    while (1) 
    {
		if((PINB & (1 << PINB0)) == 0)
  7c:	b0 99       	sbic	0x16, 0	; 22
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
		{
			while((PINB & (1 << PINB0)) == 0)
  80:	b0 9b       	sbis	0x16, 0	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
			{
				
			}
			
			if(ite == 0) 
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	19 f4       	brne	.+6      	; 0x8e <main+0x22>
				PORTA = 0x01;
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	2b bb       	out	0x1b, r18	; 27
  8c:	03 c0       	rjmp	.+6      	; 0x94 <main+0x28>
			else 
				PORTA = PORTA << 1;
  8e:	2b b3       	in	r18, 0x1b	; 27
  90:	22 0f       	add	r18, r18
  92:	2b bb       	out	0x1b, r18	; 27
			
			++ite;
  94:	01 96       	adiw	r24, 0x01	; 1
			if(ite == 9) {
  96:	89 30       	cpi	r24, 0x09	; 9
  98:	91 05       	cpc	r25, r1
  9a:	81 f7       	brne	.-32     	; 0x7c <main+0x10>
				ite = 0;
				PORTA = 0x00;
  9c:	1b ba       	out	0x1b, r1	; 27
  9e:	ec cf       	rjmp	.-40     	; 0x78 <main+0xc>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
