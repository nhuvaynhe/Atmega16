
Ex10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8PWM_unitv>:

void PWM_unit()
{
	/* See Fast PWM mode with non-inverted output
	   prescaler = 8 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  6c:	8a e6       	ldi	r24, 0x6A	; 106
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB = (1<<PB3);
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	87 bb       	out	0x17, r24	; 23
  74:	08 95       	ret

00000076 <main>:

int main(void)
{
    unsigned char duty;
	
	PWM_unit();
  76:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8PWM_unitv>
    while (1) 
    {
		for(duty = 0; duty < 255; ++duty) {
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	8f 3f       	cpi	r24, 0xFF	; 255
  7e:	49 f0       	breq	.+18     	; 0x92 <main+0x1c>
			OCR0 = duty;	// increase the LED light intensity
  80:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	ef e7       	ldi	r30, 0x7F	; 127
  84:	fe e3       	ldi	r31, 0x3E	; 62
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x10>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x16>
  8c:	00 00       	nop
    unsigned char duty;
	
	PWM_unit();
    while (1) 
    {
		for(duty = 0; duty < 255; ++duty) {
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	f5 cf       	rjmp	.-22     	; 0x7c <main+0x6>
			OCR0 = duty;	// increase the LED light intensity
			_delay_ms(8);
		} 
		
		for(duty = 255; duty > 1; duty--) {
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	90 f3       	brcs	.-28     	; 0x7a <main+0x4>
			OCR0 = duty;	// decrease the LED light intensity
  96:	8c bf       	out	0x3c, r24	; 60
  98:	ef e7       	ldi	r30, 0x7F	; 127
  9a:	fe e3       	ldi	r31, 0x3E	; 62
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x26>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x2c>
  a2:	00 00       	nop
		for(duty = 0; duty < 255; ++duty) {
			OCR0 = duty;	// increase the LED light intensity
			_delay_ms(8);
		} 
		
		for(duty = 255; duty > 1; duty--) {
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	f5 cf       	rjmp	.-22     	; 0x92 <main+0x1c>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
