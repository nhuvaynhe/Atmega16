
Ex11_PhaseCorrectPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ad  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z15PhaseCorrectPWMv>:
#include <avr/io.h>
#include <avr/delay.h>

void PhaseCorrectPWM() 
{
	TCCR0 = (1<<WGM00) | (1<<COM01) | (1<<CS01);
  6c:	82 e6       	ldi	r24, 0x62	; 98
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<PB3); 
  70:	87 b3       	in	r24, 0x17	; 23
  72:	88 60       	ori	r24, 0x08	; 8
  74:	87 bb       	out	0x17, r24	; 23
  76:	08 95       	ret

00000078 <main>:

int main(void)
{
    unsigned char duty;
	
	PhaseCorrectPWM();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <_Z15PhaseCorrectPWMv>
    while (1) 
    {
		for(duty = 0; duty < 255; ++duty) {
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	8f 3f       	cpi	r24, 0xFF	; 255
  80:	49 f0       	breq	.+18     	; 0x94 <main+0x1c>
			OCR0 = duty;
  82:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	ef e1       	ldi	r30, 0x1F	; 31
  86:	fe e4       	ldi	r31, 0x4E	; 78
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x10>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x16>
  8e:	00 00       	nop
    unsigned char duty;
	
	PhaseCorrectPWM();
    while (1) 
    {
		for(duty = 0; duty < 255; ++duty) {
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	f5 cf       	rjmp	.-22     	; 0x7e <main+0x6>
			OCR0 = duty;
			_delay_ms(10);
		}
		
		for(duty = 255; duty > 1; --duty) {
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	90 f3       	brcs	.-28     	; 0x7c <main+0x4>
			OCR0 = duty;
  98:	8c bf       	out	0x3c, r24	; 60
  9a:	ef e1       	ldi	r30, 0x1F	; 31
  9c:	fe e4       	ldi	r31, 0x4E	; 78
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x26>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x2c>
  a4:	00 00       	nop
		for(duty = 0; duty < 255; ++duty) {
			OCR0 = duty;
			_delay_ms(10);
		}
		
		for(duty = 255; duty > 1; --duty) {
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	f5 cf       	rjmp	.-22     	; 0x94 <main+0x1c>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
