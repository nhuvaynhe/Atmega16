
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  000008c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ad  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z15SPI_Master_Initv>:
#define SS 4
#define MOSI 5

void SPI_Master_Init()
{
	DDRB |= (1<<SCK) | (1<<SS) | (1<<MOSI);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	
	SPCR |= (1<<SPE) | (1<<SPR0) | (1<<MSTR);
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	81 65       	ori	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
		DORD - 0: MSB of the data transmitted first
		MSTR - 1: Master selected
		SPR0 - 1: SCK frequency /16
	*/
	
	sbi(PORTB, SS);
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	08 95       	ret

00000080 <_Z12SPI_Transmith>:
}

void SPI_Transmit(uint8_t data)
{
	SPDR = data;
  80:	8f b9       	out	0x0f, r24	; 15
	
	while(bit_is_clear(SPSR, SPIF));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z12SPI_Transmith+0x2>
	/* When a serial transfer is complete, the SPIF flag is set */
}
  86:	08 95       	ret

00000088 <main>:


int main(void)
{
	SPI_Master_Init();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <_Z15SPI_Master_Initv>
	
    while (1) 
    {
		if(bit_is_clear(PIND, 0))
  8c:	80 99       	sbic	0x10, 0	; 16
  8e:	10 c0       	rjmp	.+32     	; 0xb0 <main+0x28>
		{
			cbi(PORTB, SS);	/* Set SS low to begin transmitting data */
  90:	88 b3       	in	r24, 0x18	; 24
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	88 bb       	out	0x18, r24	; 24
			SPI_Transmit(10);
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	0e 94 40 00 	call	0x80	; 0x80 <_Z12SPI_Transmith>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e1       	ldi	r24, 0x1F	; 31
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x18>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1e>
  a6:	00 00       	nop
			_delay_ms(10);
			sbi(PORTB, SS);	/* Set SS high to stop transmitting */
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	ee cf       	rjmp	.-36     	; 0x8c <main+0x4>
		}
		
		else if(bit_is_clear(PIND, 1))
  b0:	81 99       	sbic	0x10, 1	; 16
  b2:	ec cf       	rjmp	.-40     	; 0x8c <main+0x4>
		{
			cbi(PORTB, SS);	/* Set SS low to begin transmitting data */
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	88 bb       	out	0x18, r24	; 24
			SPI_Transmit(16);
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	0e 94 40 00 	call	0x80	; 0x80 <_Z12SPI_Transmith>
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	9e e4       	ldi	r25, 0x4E	; 78
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x3c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x42>
  ca:	00 00       	nop
			_delay_ms(10);
			sbi(PORTB, SS);	/* Set SS high to stop transmitting */
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	dc cf       	rjmp	.-72     	; 0x8c <main+0x4>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
