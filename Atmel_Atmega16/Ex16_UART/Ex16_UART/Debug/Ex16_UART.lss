
Ex16_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a6  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z4sendh>:

unsigned char receive()
{
	while(bit_is_clear(UCSRA, RXC));
	return UDR;
}
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <_Z4sendh>
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <main>:

int main(void)
{	
	DDRA = 0xFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  78:	1b ba       	out	0x1b, r1	; 27
	
	UBRRL = 51;	// baud rate 9600
  7a:	83 e3       	ldi	r24, 0x33	; 51
  7c:	89 b9       	out	0x09, r24	; 9

	UCSRC = (1<<UCSZ1) | (1<<UCSZ0); // set 8-bit character size
  7e:	86 e0       	ldi	r24, 0x06	; 6
  80:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXEN) | (1<<TXEN);	//Receiver enable & Transmitter enable
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
    while (1) 
    {
		send('5');
  86:	85 e3       	ldi	r24, 0x35	; 53
  88:	0e 94 36 00 	call	0x6c	; 0x6c <_Z4sendh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	80 e7       	ldi	r24, 0x70	; 112
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x1e>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x28>
  9c:	00 00       	nop
  9e:	f3 cf       	rjmp	.-26     	; 0x86 <main+0x12>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
